swagger: '2.0'
info:
  version: 2.0.9
  title: "React - {Recomil}  API Documents - "
  description: "Author: Jung. \r\nLast Updated : 2018. 2. 5.\r\n 2018 WonderPlanet Inc. All rights reserved."
host: bengal.recomil.com
basePath: /
tags:

  - name: User
    description: ユーザ関連 API

  - name: Featured
    description: おすすめ関連 API

  - name: Category
    description: カテゴリ関連 API

  - name: Product
    description: 商品関連 API

  - name: Comment
    description: 投稿コメント関連 API

  - name: Contribution
    description: ユーザ投稿関連 API

  - name: Reaction
    description: 投稿リアクション関連 API

schemes:
  - https
security:
  - APIKeyHeaderVersion: []
    APIKeyHeaderSwagger: []
    APIKeyHeaderUserId: []
    APIKeyHeaderAuth: []

paths:
  #user
  '/user/auth/get/{facebookId}':
      get:
        tags:
          - User
        summary: "{フィード|商品情報|ユーザページ|気になる}での投稿リストを表示"
        produces:
              - application/json
        parameters:
          - in: path
            name: facebookId
            description: "ユーザのfacebook id"
            type: string
            required: true
          - in: header
            name: fb-token
            description: "facebookより取得したユーザToken"
            format: string
            required: true
        responses:
          '200':
            description: Success
  '/user/page/get/{ownerId}':
    get:
      tags:
        - User
      summary: "ユーザページでユーザ情報を取得"
      produces:
            - application/json
      parameters:
        - in: path
          name: ownerId
          description: "ユーザページのオーナーユーザID。ない場合は現在アクセス中のユーザ情報を出力"
          type: string
          required: false
      responses:
        '200':
          description: Success
  '/user/info/get/':
    get:
      tags:
        - User
      summary: "ユーザの詳細情報を取得"
      produces:
            - application/json
      responses:
        '200':
          description: Success

  '/user/info/edit':
      put:
        tags:
          - User
        summary: "ユーザの詳細情報を編集"
        produces:
          - multipart/form-data
        parameters:
          - in: formData
            name: user_name
            type: string
            required: false
            description: "ユーザー名"

          - in: formData
            name: birthday
            type: string
            required: false
            description: "誕生日"

          - in: formData
            name: birthday_published_flag
            type: integer
            format: 'date-time'
            required: false
            enum:
              - 0
              - 1
            description: "0:非表示, 1:表示"

          - in: formData
            name: gender
            type: integer
            required: false
            enum:
              - 1
              - 2
              - 3
            description: "1:男性,2:女性,3その他"

          - in: formData
            name: gender_published_flag
            type: integer
            required: false
            enum:
              - 0
              - 1
            description: "0:非表示, 1:表示"

          - in: formData
            name: mail_address
            type: string
            format: email
            required: false
            description: "メールアドレス"

          - in: formData
            name: cover_image
            type: file
            description: "背景画像"
            required: false

          - in: formData
            name: profile_image
            type: file
            description: "プロフィール画像"
            required: false

          - in: formData
            name: text
            type: string
            required: false
            description: "編集内容"

          - in: formData
            name: address
            type: string
            required: false
            description: "住所"

          - in: formData
            name: description
            type: string
            required: false
            description: "紹介文"


        responses:
          '200':
            description: Success


  '/user/block/list/':
      get:
        tags:
          - User
        summary: "ユーザのブロックリストを取得"
        produces:
              - application/json
        responses:
          '200':
            description: Success

  '/user/block/edit/{targetUserId}/{isBlockOn}':
      put:
        tags:
          - User
        summary: "{targetUserId}のブロック状態を{isBlockOn}にする"
        produces:
              - application/json
        parameters:
          - in: path
            name: targetUserId
            description: "ブロック対象ユーザID"
            type: integer
            format: int64
            required: true
          - in: path
            name: isBlockOn
            type: integer
            format: binary
            enum:
              - 0
              - 1
            description: "1:Blockする. 0:block解除する"
            required: true

        responses:
          '200':
            description: Success

  '/user/friend/list/{ownerId}':
    get:
      tags:
        - User
      summary: "{ownerId}ユーザの{listType}リストを取得"
      produces:
        - application/json
      parameters:
        - in: path
          name: ownerId
          description: "オーナーユーザID。{0||null}の場合は現在アクセス中のユーザ情報を出力"
          type: integer
          format: int64
          required: false
        - in: query
          name: listType
          description: "follow:followリストを出力.\r\n follower:followerリストを出力"
          type: string
          required: true
          enum:
            - follow
            - follower
        - $ref: '#/parameters/Page'
        - $ref: '#/parameters/Limit'
      responses:
        '200':
          description: Success

  '/user/friend/edit/{targetUserId}/{isFollowOn}':
    put:
      tags:
        - User
      summary: "{targetUserId}ユーザとfollow状態を{isFollowOn}にする"
      produces:
        - application/json
      parameters:
        - in: path
          name: targetUserId
          description: "フォロー対象ユーザ"
          type: integer
          format: int64
          required: true
        - in: path
          name: isFollowOn
          description: "0:off 1:on"
          type: integer
          required: true
          enum:
            - 0
            - 1
      responses:
        '200':
          description: Success

  '/user/device/update':
    post:
      tags:
        - User
      summary: "ユーザ通知トークンを登録"
      produces:
        - text/plain
      parameters:
      - in: formData
        name: notification_token
        type: string
        required: true
        description: "Firebase 通知トークン"
      - in: formData
        name: device_uuid
        type: string
        required: true
        description: "デバイス 識別子"
      - in: formData
        name: device_type
        type: string
        required: true
        description: "デバイスタイプ"
        enum:
          - iPhone
          - iPad
          - Android
          - Kindle
          - Etc
      responses:
        '200':
          description: Success


  '/user/notification-setting/get':
    get:
      tags:
        - User
      summary: "ユーザの通知設定を取得"
      produces:
        - application/json
      responses:
        '200':
          description: Success
  '/user/notification-setting/edit':
    put:
      tags:
        - User
      summary: "ユーザの通知設定リストを取得"
      produces:
        - application/json
      parameters:
        - in: formData
          name: is_comment_notification_allowed
          type: integer
          required: false
          enum:
            - 0
            - 1
          description: "コメント通知許可 on(0)/off(1)"

        - in: formData
          name: is_follow_notification_allowed
          type: integer
          required: false
          enum:
            - 0
            - 1
          description: "フォロー通知許可 on(0)/off(1)"

        - in: formData
          name: is_interest_notification_allowed
          type: integer
          required: false
          enum:
            - 0
            - 1
          description: "気になる通知許可 on(0)/off(1)"
        - in: formData
          name: is_like_notification_allowed
          type: integer
          required: false
          enum:
           - 0
           - 1
          description: "いいね通知許可 on(0)/off(1)"

      responses:
        '200':
          description: Success
  '/user/notification-log/list':
      get:
        tags:
          - User
        summary: "ユーザの通知ログを取得"
        produces:
              - application/json
        parameters:
          - in: query
            name: listType
            type: string
            required: true
            description: "user : User通知リスト admin :　管理者通知リスト"
            enum:
              - user
              - admin
          - in: query
            name: boundary_id
            type: integer
            format: int64
            required: false
            description: "User通知の場合使用.ユーザ通知はpage,limitの代わりにboundaryId 以降のIDの通知ログを取得"
          - $ref: '#/parameters/Page'
          - $ref: '#/parameters/Limit'
        responses:
          '200':
            description: Success

  #contribution
  '/contribution/list/{targetId}':
    get:
      tags:
        - Contribution
      summary: "{フィード|商品情報|ユーザページ|気になる}での投稿リストを表示"
      produces:
            - application/json
      parameters:
        - in: path
          name: targetId
          description: "listType別検索用 ID\r\n
          - product : 商品id,\r\n
          - interest:ページオナーID \r\n
          - user:ページオナーID(ない場合現在アプリ使用中のユーザIDにサーバ上で自動アップデート) \r\n
          - feed:必要なし "
          type: integer
          format: int64
          required: false
        - in: query
          name: listType
          description: "{product 商品別, interest 気になる, user ユーザ投稿, feed　フィード}"
          format: string
          enum:
            - product
            - interest
            - user
            - feed
          required: true
        - in: query
          name: feelingType
          description: "商品ごとの投稿を取得する場合(listTypeが productの場合), 投稿のfeelingタイプ別の投稿取得"
          format: string
          enum:
            - all
            - positive
            - negative
          required: false
        - $ref: '#/parameters/Page'
        - $ref: '#/parameters/Limit'
      responses:
        '200':
          description: Success
  '/contribution/get/{contributionId}':
    get:
      tags:
        - Contribution
      summary: "投稿詳細を取得"
      produces:
            - application/json
      parameters:
        - in: path
          name: contributionId
          description: "投稿ID"
          type: integer
          format: int64
          required: false
      responses:
        '200':
          description: Success
  '/contribution/check/{productId}':
    get:
      tags:
        - Contribution
      summary: "同一商品の投稿実績確認"
      produces:
            - application/json
      parameters:
        - in: path
          name: productId
          description: "商品ID"
          type: integer
          format: int64
          required: false
      responses:
        '200':
          description: Success
  '/contribution/create':
    post:
      tags:
        - Contribution
      summary: "新規投稿生成"
      produces:
        - multipart/form-data
      parameters:
      - in: formData
        name: product_item_id
        type: integer
        format: int64
        required: true
        description: "商品ID"
      - in: formData
        name: is_consent
        type: integer
        required: true
      - in: formData
        name: text
        type: string
        required: true
      - in: formData
        name: image1
        type: file
        description: "画像1"
        required: false
      - in: formData
        name: image2
        type: file
        description: "画像2"
        required: false
      - in: formData
        name: image3
        type: file
        description: "画像3"
        required: false
      - in: formData
        name: image4
        type: file
        description: "画像4"
        required: false
      responses:
        '200':
          description: Success
  '/contribution/edit/{contributionId}':
    put:
      tags:
        - Contribution
      summary: "投稿編集"
      produces:
      - application/json
      parameters:
      - in: path
        name: contributionId
        type: integer
        format: int64
        required: true
        description: "投稿ID"
      - in: formData
        name: text
        type: string
        required: true
        description: "編集内容"
      responses:
        '200':
          description: Success
  '/contribution/delete/{contributionId}':
      delete:
        tags:
          - Contribution
        summary: "投稿削除"
        produces:
        - application/json
        parameters:
        - in: path
          name: contributionId
          type: integer
          format: int64
          required: true
          description: "投稿ID"
        responses:
          '200':
            description: Success
  #reaction
  '/reaction/list/{contributionId}':
        get:
          tags:
            - Reaction
          summary: "投稿に対するリアクション一覧取得"
          produces:
          - application/json
          parameters:
          - in: path
            name: contributionId
            type: integer
            format: int64
            required: true
            description: "投稿ID"
          - in: query
            name: type
            type: integer
            format: int32
            enum:
              - 0
              - 1
              - 2
              - 3
            required: true
            description: "0:全て,1:いいね、2:気になる、3:持ってる"
          - $ref: '#/parameters/Page'
          - $ref: '#/parameters/Limit'
          responses:
            '200':
              description: Success

  '/reaction/edit/{isReactionOn}':
    put:
      tags:
        - Reaction
      summary: "リアクションする・取り消す"
      produces:
      - application/json
      parameters:
      - in: path
        name: isReactionOn
        type: integer
        format: int64
        required: true
        description: "リアクション On(1) / Off(0)"
        enum:
          - 0
          - 1

      - in: formData
        name: contribution_id
        type: integer
        format: int645
        required: true
        description: "投稿ID"

      - in: formData
        name: contribution_reaction_type
        type: integer
        format: int64
        required: true
        enum: [1,2,3]
        description: >
          type:
            1:like , 2:interest , 3:have
      responses:
        '200':
              description: Success
  #comment
  '/comment/list/{contributionId}/{boundaryId}':
      get:
        tags:
          - Comment
        summary: "投稿{contributionId}に対するコメントリストを{boundaryId}以降取得"
        produces:
        - application/json
        parameters:
        - in: path
          name: contributionId
          type: integer
          format: int64
          required: true
          description: "投稿ID"
        - in: path
          name: boundaryId
          type: integer
          format: int64
          required: true
          description: "取得基準ID, 0の場合最初から取得"
        responses:
          '200':
            description: Success
  '/comment/create':
      post:
        tags:
          - Comment
        summary: "投稿{contribution_id}に対する新規コメント投稿"
        produces:
        - application/json
        parameters:
        - in: query
          name: contribution_id
          type: integer
          format: int64
          required: true
          description: "投稿ID"
        - in: query
          name: text
          type: string
          required: true
          description: "コメント内容"
        responses:
          '200':
            description: Success
  '/comment/delete/{commentId}':
      delete:
        tags:
          - Comment
        summary: "投稿{contribution_id}に対する新規コメント投稿"
        produces:
        - application/json
        parameters:
        - in: path
          name: commentId
          type: integer
          format: int64
          required: true
          description: "コメントID"

        responses:
          '200':
            description: Success
  #product
  '/product/list':
      get:
        tags:
          - Product
        summary: "{キーワード / Category / Jan code}による商品一覧を取得"
        produces:
        - application/json
        parameters:
        - in: query
          name: keyword
          type: string
          required: false
          description: "優先順位1。 このキーが設定されるとキーワード検索。keywordはbase64encodeすること。カテゴリ項目と同時に入力可能"
        - in: query
          name: jan_code
          type: string
          required: false
          description: "優先順位2。 このキーが設定されるとJan code検索。。"
        - in: query
          name: category
          type: int
          format: int32
          required: false
          description: "優先順位3。keyword / jan_codeがない場合カテゴリ検索となる"
        - in: query
          name: order
          type: string
          required: false
          description: "column-orderの形式、組みあわせ自由、先に書かれたものが優先\r\n
           column list : positive_count, negative_count,contribution_count, display_name\r\n
           order list : asc,desc\r\n
           例 : positive_count-desc,negative_count-asc,contribution_count-desc,display_name-asc
          "
        - $ref: '#/parameters/Page'
        - $ref: '#/parameters/Limit'
        responses:
          '200':
            description: Success
  '/product/get/{productId}':
      delete:
        tags:
          - Product
        summary: "商品IDによる商品検索"
        produces:
        - application/json
        parameters:
        - in: path
          name: productId
          type: integer
          format: int64
          required: true
          description: "商品ID"

        responses:
          '200':
            description: Success
  #category
  '/category/list/{ancestorId}':
      get:
        tags:
          - Category
        summary: "上位カテゴリに属している下位カテゴリリストを取得。{0/null}の場合最上位のカテゴリリストを取得"
        produces:
        - application/json
        parameters:
        - in: path
          name: ancestorId
          type: int
          required: false
          description: "検索対象カテゴリの上位カテゴリ。{0/null}の場合は最上位カテゴリリストを取得"
        responses:
          '200':
            description: Success
  #featured
  '/featured/user/list':
      get:
        tags:
          - Featured
        summary: "おすすめユーザリストを取得"
        produces:
        - application/json
        parameters:
        - in: query
          name: type
          type: string
          required: false
          enum:
            - init
            - feed
            - facebook
            - pickup
          description: "init:初期起動時\r\n
          feed:フィードの上部(一気に30件を返す。ページネーションなし)\r\n
          facebook:facebook友達\r\n
          ページネーションはこちらのみ有効"
        - $ref: '#/parameters/Page'
        - $ref: '#/parameters/Limit'
        responses:
          '200':
            description: Success

securityDefinitions:
  APIKeyHeaderSwagger:
    type: apiKey
    in: header
    name: react-swagger
  APIKeyHeaderVersion:
      type: apiKey
      in: header
      name: x-react-api-version
  APIKeyHeaderUserId:
    type: apiKey
    in: header
    name: react-user-id
  APIKeyHeaderAuth:
    type: apiKey
    in: header
    name: react-auth


parameters:
  Page:
      name: page
      type: integer
      format: int32
      required: false
      in: query
      description: "ページ番号,1から開始"
  Limit:
      name: limit
      type: integer
      format: int32
      required: false
      in: query
      description: "ページあたり表示件数"
#definitions:
#  Order:
#    type: object
#    properties:
#      id:
#        type: integer
#        format: int64
#      petId:
#        type: integer
#        format: int64
#      quantity:
#        type: integer
#        format: int32
#      shipDate:
#        type: string
#        format: date-time
#      status:
#        type: string
#        description: Order Status
#        enum:
#          - placed
#          - approved
#          - delivered
#      complete:
#        type: boolean
#        default: false
#    xml:
#      name: Order
#  Category:
#    type: object
#    properties:
#      id:
#        type: integer
#        format: int64
#      name:
#        type: string
#    xml:
#      name: Category
#  User:
#    type: object
#    properties:
#      id:
#        type: integer
#        format: int64
#      username:
#        type: string
#      firstName:
#        type: string
#      lastName:
#        type: string
#      email:
#        type: string
#      password:
#        type: string
#      phone:
#        type: string
#      userStatus:
#        type: integer
#        format: int32
#        description: User Status
#    xml:
#      name: User
#  Tag:
#    type: object
#    properties:
#      id:
#        type: integer
#        format: int64
#      name:
#        type: string
#    xml:
#      name: Tag
